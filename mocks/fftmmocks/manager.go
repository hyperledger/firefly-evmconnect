// Code generated by mockery v2.53.5. DO NOT EDIT.

package fftmmocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	eventapi "github.com/hyperledger/firefly-transaction-manager/pkg/eventapi"

	ffcapi "github.com/hyperledger/firefly-transaction-manager/pkg/ffcapi"

	mock "github.com/stretchr/testify/mock"

	mux "github.com/gorilla/mux"

	txhandler "github.com/hyperledger/firefly-transaction-manager/pkg/txhandler"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// APIRouter provides a mock function with no fields
func (_m *Manager) APIRouter() *mux.Router {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIRouter")
	}

	var r0 *mux.Router
	if rf, ok := ret.Get(0).(func() *mux.Router); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mux.Router)
		}
	}

	return r0
}

// CleanupAPIManagedEventStream provides a mock function with given fields: name
func (_m *Manager) CleanupAPIManagedEventStream(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CleanupAPIManagedEventStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *Manager) Close() {
	_m.Called()
}

// GetAPIManagedEventStream provides a mock function with given fields: spec, listeners
func (_m *Manager) GetAPIManagedEventStream(spec *apitypes.EventStream, listeners []*apitypes.Listener) (bool, eventapi.EventStream, error) {
	ret := _m.Called(spec, listeners)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIManagedEventStream")
	}

	var r0 bool
	var r1 eventapi.EventStream
	var r2 error
	if rf, ok := ret.Get(0).(func(*apitypes.EventStream, []*apitypes.Listener) (bool, eventapi.EventStream, error)); ok {
		return rf(spec, listeners)
	}
	if rf, ok := ret.Get(0).(func(*apitypes.EventStream, []*apitypes.Listener) bool); ok {
		r0 = rf(spec, listeners)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*apitypes.EventStream, []*apitypes.Listener) eventapi.EventStream); ok {
		r1 = rf(spec, listeners)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(eventapi.EventStream)
		}
	}

	if rf, ok := ret.Get(2).(func(*apitypes.EventStream, []*apitypes.Listener) error); ok {
		r2 = rf(spec, listeners)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionByIDWithStatus provides a mock function with given fields: ctx, txID, withHistory
func (_m *Manager) GetTransactionByIDWithStatus(ctx context.Context, txID string, withHistory bool) (*apitypes.TXWithStatus, error) {
	ret := _m.Called(ctx, txID, withHistory)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByIDWithStatus")
	}

	var r0 *apitypes.TXWithStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*apitypes.TXWithStatus, error)); ok {
		return rf(ctx, txID, withHistory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *apitypes.TXWithStatus); ok {
		r0 = rf(ctx, txID, withHistory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.TXWithStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, txID, withHistory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileConfirmationsForTransaction provides a mock function with given fields: ctx, txHash, confirmMap, targetConfirmationCount
func (_m *Manager) ReconcileConfirmationsForTransaction(ctx context.Context, txHash string, confirmMap *ffcapi.ConfirmationMap, targetConfirmationCount uint64) (*ffcapi.ConfirmationMapUpdateResult, error) {
	ret := _m.Called(ctx, txHash, confirmMap, targetConfirmationCount)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileConfirmationsForTransaction")
	}

	var r0 *ffcapi.ConfirmationMapUpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *ffcapi.ConfirmationMap, uint64) (*ffcapi.ConfirmationMapUpdateResult, error)); ok {
		return rf(ctx, txHash, confirmMap, targetConfirmationCount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *ffcapi.ConfirmationMap, uint64) *ffcapi.ConfirmationMapUpdateResult); ok {
		r0 = rf(ctx, txHash, confirmMap, targetConfirmationCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ffcapi.ConfirmationMapUpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *ffcapi.ConfirmationMap, uint64) error); ok {
		r1 = rf(ctx, txHash, confirmMap, targetConfirmationCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with no fields
func (_m *Manager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionCompletions provides a mock function with no fields
func (_m *Manager) TransactionCompletions() txhandler.TransactionCompletions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionCompletions")
	}

	var r0 txhandler.TransactionCompletions
	if rf, ok := ret.Get(0).(func() txhandler.TransactionCompletions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txhandler.TransactionCompletions)
		}
	}

	return r0
}

// TransactionHandler provides a mock function with no fields
func (_m *Manager) TransactionHandler() txhandler.TransactionHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionHandler")
	}

	var r0 txhandler.TransactionHandler
	if rf, ok := ret.Get(0).(func() txhandler.TransactionHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txhandler.TransactionHandler)
		}
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
